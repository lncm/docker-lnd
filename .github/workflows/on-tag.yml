name: Build & deploy on git tag push

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build lnd
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        arch:
          - amd64
          - arm32v6
          - arm32v7
          - arm64v8

    env:
      APP: lnd
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v2

      # Setup environment
      # TAG  => vX.Y.Z[+build<N>]
      # ARCH => amd64|arm32v6|arm32v8|arm64v8
      # DIR  => X.Y
      - name: Setup environment
        run: |
          if ! echo "$GITHUB_REF" | grep -qE '^refs/tags/v(.?[0-9]+){3,4}(-[-a-z]+)?\+build[0-9]+$'; then
            echo "ERR: TAG must be in format: vX.Y.Z[.P][-VARIANT]+buildNUMBER"
            exit 1
          fi

          TAG="$(echo "$GITHUB_REFS" | sed -nE 's|^refs/tags/(.*)$|\1|p')"
          echo ::set-env name=TAG::"$TAG"

          echo ::set-env name=VARIANT::"$(echo "$TAG" | sed -nE 's|^[^+-]+-?([^+]+)?\+.*$|\1|p')"
          echo ::set-env name=BUILD::"$(echo "$TAG" | sed -nE 's|^[^+]+\+build([0-9]+)$|\1|p')"
          echo ::set-env name=DIR::"$(echo "${TAG#v}" | cut -d. -f-2)"

      # GOARCH => arm|arm64
      # GOARM  => 6|7
      - name: Setup Go environment
        if: matrix.arch != 'amd64'
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          GOARCH="${ARCH%32v?}"
          echo ::set-env name=GOARCH::"${GOARCH%v8}"
          echo ::set-env name=GOARM::"$(echo "$ARCH" | sed -En 's|^arm32v([6-7])$|\1|p')"

      - name: Print ENV VARs set above
        run: |
          printf "    APP: %s\n"  "$APP"
          printf "   ARCH: %s\n"  "${{ matrix.arch }}"
          printf "    TAG: %s\n"  "$TAG"
          printf "VARIANT: %s\n"  "$VARIANT"
          printf "    DIR: %s\n"  "$DIR"
          printf "  BUILD: %s\n"  "$BUILD"
          printf " GOARCH: %s\n"  "$GOARCH"
          printf "  GOARM: %s\n"  "$GOARM"

      - name: Apply variant patch (if any)
        if: env.VARIANT != ''
        run: (cd "$DIR/"  &&  patch < variant-$VARIANT.patch)

      - name: Build lnd
        run: >
          docker build --no-cache "$DIR/"
          --build-arg "ARCH=${{ matrix.arch }}"
          --build-arg "GOARCH=$GOARCH"
          --build-arg "GOARM=$GOARM"
          --label     arch="${{ matrix.arch }}"
          --label     commit="${{ github.sha }}"
          --label     git-tag="$TAG"
          --label     guilty="${{ github.actor }}"
          --label     repo-url="${{ github.repositoryUrl }}"
          --label     variant="$VARIANT"
          --tag       "$APP:${{ matrix.arch }}"

      - name: Show built image details
        run: docker images "$APP"

      - name: Register self-compiled qemu
        if: matrix.arch != 'amd64'
        run: docker run --rm --privileged "meedamian/simple-qemu:$QEMU_VERSION" -p yes

      - name: Run sanity checks
        env:
          DIR: /usr/local/bin
        run: |
          run() {
            ENTRYPOINT="${1:-$APP}"; shift;
            ARGS=${*:-"--version"}

            printf "$ %s %s\n" "$ENTRYPOINT" "$ARGS"
            docker run --rm  --entrypoint "$ENTRYPOINT"  "$APP:${{ matrix.arch }}"  $ARGS
            printf "\n"
          }

          docker inspect "$APP:${{ matrix.arch }}" | jq '.'
          printf "\n"

          run lnd
          run lncli

          run uname -a
          run cat /etc/os-release
          run sha256sum "$DIR/lnd" "$DIR/lncli"

          docker run --rm --entrypoint=sh -u=root "$APP:${{ matrix.arch }}" -c "apk add --no-cache file && file $DIR/lnd $DIR/lncli"

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "$APP:${{ matrix.arch }}" | gzip > "image/docker-$APP-$TAG-${{ matrix.arch }}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum image/*

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binaries from the built image
        run: |
          mkdir -p binaries/
          ID=$(docker create "$APP:${{ matrix.arch }}")
          docker cp  "$ID:/usr/local/bin/lnd"     binaries/
          docker cp  "$ID:/usr/local/bin/lncli"   binaries/
          docker rm  "$ID"

          # Compress each binary separately
          for file in binaries/*; do
            gzip "$file"
            mv "$file.gz" "$file-$TAG-${{ matrix.arch }}.gz"
          done

      - name: Print sha256sum of extracted binaries
        run: sha256sum binaries/*

      - name: Add raw binaries as build artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binaries/


  docker-hub:
    name: Tag & deploy to Docker Hub.  Only after successful build

    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Setup environment
        run: |
          SLUG="$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"
          echo ::set-env name=SLUG::"$SLUG"
          echo ::set-env name=APP::"$(echo "$SLUG" | awk -F/ '{print $NF}')"

          TAG="$(echo "$GITHUB_REFS" | sed -nE 's|^refs/tags/(.*)$|\1|p')"
          echo ::set-env name=TAG::"$TAG"

          echo ::set-env name=VERSION::"$(echo "$TAG" | sed -nE 's|^([^+-]+).*$|\1|p')"
          echo ::set-env name=BUILD::"$(echo "$TAG" | sed -nE 's|^[^+]+\+build([0-9]+)$|\1|p')"

      - name: Print just set ENV VARs
        run: |
          printf "    TAG: %s\n"  "$TAG"
          printf "   SLUG: %s\n"  "$SLUG"
          printf "    APP: %s\n"  "$APP"
          printf "VERSION: %s\n"  "$VERSION"
          printf "  BUILD: %s\n"  "$BUILD"

      - name: Enable manifests & print Docker version
        run: |
          mkdir -p ~/.docker
          echo '{ "experimental": "enabled" }' > ~/.docker/config.json
          sudo systemctl restart docker
          docker version

      - name: Download images built in build job
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: find docker-images -exec docker load -i "{}" \;

      # No short tags.  lnd releases are quite chaotic, it's better to no provide convenience that can easily backfire.
      - name: Version-tag all images
        run: |
          for arch in $(docker images "$APP" --format "{{.Tag}}"); do
            docker tag  "$APP:$arch"  "$SLUG:$VERSION-$arch-$BUILD"
            docker tag  "$APP:$arch"  "$SLUG:$VERSION-$arch"
          done

      - name: List all tagged images
        run: docker images "$SLUG"

      - name: Login to Docker Hub
        env:
          DOCKER_USER: meedamian
        run: |
          echo "Logging in as ${DOCKER_USER}â€¦"
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u="$DOCKER_USER" --password-stdin

      - name: Push all images
        run: docker images "$SLUG" --format "{{.Repository}}:{{.Tag}}" | xargs -I %  docker push %

      - name: Create manifest
        run: >
          docker -D manifest create  "$SLUG:$VERSION"  \
            "$SLUG:$VERSION-amd64" \
            "$SLUG:$VERSION-arm32v6" \
            "$SLUG:$VERSION-arm32v7" \
            "$SLUG:$VERSION-arm64v8"

      - name: Annotate arm32v6
        run: docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm32v6"  --os linux  --arch arm    --variant v6

      - name: Annotate arm32v7
        run: docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm32v7"  --os linux  --arch arm    --variant v7

      - name: Annotate arm64v8
        run: docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm64v8"  --os linux  --arch arm64  --variant v8

      - name: Print manifest details
        run: docker manifest inspect "$SLUG:$VERSION" | jq '.'

      - name: Push manifest
        run: docker manifest push "$SLUG:$VERSION"


  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Setup environment
        run: |
          TAG="$(echo "$GITHUB_REFS" | sed -nE 's|^refs/tags/(.*)$|\1|p')"
          echo ::set-env name=TAG_NAME::"$(echo "$TAG" | cut -d+ -f1)"
          echo ::set-env name=LND_VERSION::"$(echo "$TAG_NAME" | cut -d- -f1)-beta"

      - name: Download binaries from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: binaries

      - name: Download Docker images from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print checksums of everything
        run: sha256sum  binaries/*  docker-images/*

      # TODO: change to official way
      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@v1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.TAG_NAME }}
          body: "This release packages `lnd` version released here: https://github.com/lightningnetwork/lnd/releases/tag/${{ env.LND_VERSION }}"
          prerelease: true
          gzip: false
          files: >
            docker-images/*
            binaries/*
