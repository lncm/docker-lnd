name: Build lnd on push, or PR to master

on:
  push:
    branches: [ 'master' ]
  pull_request:
    branches: [ 'master' ]

jobs:
  build:
    name: Build lnd
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm32v6
          - arm32v7
          - arm64v8

        ver:
          - 0.5
          - 0.6
          - 0.7
          - 0.8
          - 0.9

    env:
      DOCKER_BUILDKIT: 1
      APP: lnd
      VER_ARCH: "${{matrix.ver}}-${{matrix.arch}}"

    steps:
      - uses: actions/checkout@v2

      - name: Verify all patches apply cleanly
        run: ./scripts/verify-patches.sh "${{ matrix.ver }}"

      # NOTE: for GOARCH: remove "v8", or "32v?" suffixes, if present
      # NOTE: for GOARM: extract last digit if matches "arm32v"
      - name: Setup environment
        if: matrix.arch != 'amd64'
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          GOARCH="${ARCH%32v?}"
          echo ::set-env name=GOARCH::"${GOARCH%v8}"
          echo ::set-env name=GOARM::"$(echo "$ARCH" | sed -En 's|^arm32v([6-7])$|\1|p')"

      - name: Build ${{ env.APP }}:${{ matrix.ver }}-${{ matrix.arch }}
        run: >
          docker build --no-cache "${{ matrix.ver }}/"
          --build-arg "ARCH=${{ env.ARCH }}"
          --build-arg "GOARCH=$GOARCH"
          --build-arg "GOARM=$GOARM"
          --tag       "$APP:$VER_ARCH"

      - name: Show built image details
        run: docker images "$APP"

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "$APP:$VER_ARCH" | gzip > "image/$APP-$VER_ARCH.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum "image/$APP-$VER_ARCH.tgz"

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binaries from the built image
        run: |
          mkdir -p bins/ binaries/
          ID=$(docker create "$APP:$VER_ARCH")
          docker cp  "$ID:/usr/local/bin/lnd"     bins/
          docker cp  "$ID:/usr/local/bin/lncli"   bins/
          docker rm  "$ID"

          # Compress both binaries into a single archive
          tar  -C bins/  -cvaf "binaries/$APP-$VER_ARCH.tgz"  .

      - name: Print sha256sum of extracted binaries
        run: sha256sum bins/*

      - name: Add raw binaries as build artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binaries/

  test:
    name: Check sanity of images
    runs-on: ubuntu-18.04
    needs: build

    env:
      QEMU_VERSION: v4.2.0
      APP: lnd

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of all Docker images
        run: sha256sum docker-images/*

      - name: Register self-compiled qemu
        run: docker run --rm --privileged "meedamian/simple-qemu:$QEMU_VERSION" -p yes

      - name: Load all images locally
        run: find ./docker-images -name '*.tgz' -exec docker load -i "{}" \;

      - name: List all tagged images
        run: docker images "$APP"

      - name: Run sanity checks
        env:
          DIR: /usr/local/bin
        run: |
          for tag in $(docker images "$APP" --format "{{.Tag}}"); do
            run() {
              ENTRYPOINT="${1:-$APP}"; shift;
              ARGS=${*:-"--version"}

              printf "\n  $ %s %s\n  %s\n" \
                "$ENTRYPOINT"  "$ARGS" \
                "$(docker run --rm  --entrypoint "$ENTRYPOINT"  "$APP:$tag"  $ARGS)"
            }

            printf "\n>>> %s:%s\n" "$APP" "$tag"

            # TODO: Check what's in the image JSON
            docker inspect "$APP:$tag" | jq '.'

            run lnd
            run lncli

            run uname -a
            run cat /etc/os-release
            run sha256sum "$DIR/lnd" "$DIR/lncli"

            docker run --rm --entrypoint=sh -u=root "$APP:$tag" -c "apk add --no-cache file && file $DIR/lnd $DIR/lncli"
          done
